#!/usr/bin/env python
import rospy
from geometry_msgs.msg import Twist
from std_srvs.srv import Empty, EmptyRequest, EmptyResponse


class ControlNode:
    def __init__(self):
        rospy.init_node("controller")
        rospy.loginfo("Launching controller node...")

        self.velocity_publisher = rospy.Publisher("/cmd_vel", Twist, queue_size=128)
        rospy.Service("/launch_rover", Empty, self.launch_rover)

        rospy.loginfo("Controller node is ready!")

    def forward(self):
        speed = 1
        distance = 10
        vel_msg = Twist()

        vel_msg.linear.x = speed
        vel_msg.linear.y = 0
        vel_msg.linear.z = 0
        vel_msg.angular.x = 0
        vel_msg.angular.y = 0
        vel_msg.angular.z = 0

        t0 = rospy.Time.now().to_sec()
        current_distance = 0

        while(current_distance < distance):
            #Publish the velocity
            self.velocity_publisher.publish(vel_msg)
            #Takes actual time to velocity calculus
            t1=rospy.Time.now().to_sec()
            #Calculates distancePoseStamped
            current_distance= speed*(t1-t0)

        vel_msg.linear.x = 0
        self.velocity_publisher.publish(vel_msg)

    def rotate(self, right = 1):
        speed = 2
        distance = 40
        vel_msg = Twist()

        vel_msg.linear.x = speed
        vel_msg.linear.y = 0
        vel_msg.linear.z = 0
        vel_msg.angular.x = 0
        vel_msg.angular.y = 0
        vel_msg.angular.z = right * speed

        t0 = rospy.Time.now().to_sec()
        current_distance = 0

        while(current_distance < distance):
            #Publish the velocity
            self.velocity_publisher.publish(vel_msg)
            #Takes actual time to velocity calculus
            t1=rospy.Time.now().to_sec()
            #Calculates distancePoseStamped
            current_distance= speed*(t1-t0)

        vel_msg.linear.x = 0
        vel_msg.angular.z = 0
        self.velocity_publisher.publish(vel_msg)

    def launch_rover(self, req):
        self.forward()
        self.rotate()
        self.forward()
        self.rotate(-1)

        return EmptyResponse()

    def spin(self):
        rospy.spin()


if __name__ == "__main__":
    ControlNode().spin()

